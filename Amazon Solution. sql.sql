# Top Selling Products Query the top 10 products by total sales value.Challenge: Include product name, total quantity sold, and total sales value.

select
	  p.product_id,
      p.product_name,
      coalesce(sum(quantity*price_per_unit),0) as total_sales,
	  coalesce(count(o.order_id),0) as total_orders,
      coalesce(sum(quantity),0) as total_quantity
from  dim_product p 
left join 
          order_item  i on i.product_id = p.product_id
left join 
          orders o on o.order_id = i.order_id         
group by product_name,product_id
order by total_sales desc
limit 10;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Revenue by Category. Calculate total revenue generated by each product category.Challenge: Include the percentage contribution of each category to total revenue.

with x as (
SELECT 
    COALESCE(ca.category_name, 'Unknown') AS category_name,
    ROUND(SUM(i.quantity * i.price_per_unit), 2) AS total_revenue
FROM order_item i
right join dim_product p ON p.product_id = i.product_id
LEFT JOIN dim_category ca ON p.category_id = ca.category_id
GROUP BY category_name
),

 y as (select
 x.category_name,
 x.total_revenue,
 round(x.total_revenue/sum(x.total_revenue) over() *100,2) as percent
 from x
 )
 select * from y ;


-----------------------------------------------------------------------------------------------------------------------------------------------------------------


# Average Order Value (AOV) Compute the average order value for each customer. Challenge: Include only customers with more than 5 orders.

WITH x AS 
(
    SELECT 
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
        COUNT(o.order_id) AS total_orders,
        COALESCE(SUM(quantity * price_per_unit), 0) AS total_revenue
    FROM dim_customer c
    LEFT JOIN orders o ON c.customer_id = o.customer_id 
    LEFT JOIN order_item i ON o.order_id = i.order_id
    GROUP BY c.customer_id, customer_name
),
y AS 
(
    SELECT 
        customer_id,
        ROUND((total_revenue / NULLIF(total_orders, 0)), 2) AS Avg_order_value 
    FROM x
)
SELECT
    x.customer_name,
    x.total_orders,
    x.total_revenue,
    y.Avg_order_value 
FROM x
JOIN y ON x.customer_id = y.customer_id
where  total_orders > 5;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


 # Monthly Sales Trend. Query monthly total sales over the past year. Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!


SELECT 
    YEAR(order_date) AS year,
    MONTH(order_date) AS month,
    SUM(quantity * price_per_unit) AS current_month_sale,
    LAG(SUM(quantity * price_per_unit), 1) 
    OVER (ORDER BY YEAR(order_date), MONTH(order_date)) AS last_month_sale
FROM orders o
left JOIN order_item i ON i.order_id = o.order_id
GROUP BY 1, 2
ORDER BY year ASC, month ASC;

# Customers with No Purchases.Find customers who have registered but never placed an order.Challenge: List customer details and the time since their registration.

select *
from dim_customer c
where customer_id not in (select distinct customer_id from orders);

----------------------------------------------------------------------------------------------------------------------------------------------------------------


# Least-Selling Categories by State.Identify the least-selling product category for each state.Challenge: Include the total sales for that category within each state. ---------- (need to make store procedures)----------

WITH x AS (
    SELECT
        coalesce(ca.category_name, "unknown") as category_name,
        coalesce (c.state,0) as state ,
        coalesce(SUM(i.quantity * i.price_per_unit), 0 ) AS total_sales
    FROM dim_customer c
    LEFT JOIN orders o ON o.customer_id = c.customer_id              
    LEFT JOIN order_item i ON o.order_id = i.order_id  -- Fix: Join `order_item` to `orders`
    LEFT JOIN dim_product p ON i.product_id = p.product_id -- Fix: Join `dim_product` via `order_item`
    LEFT JOIN dim_category ca ON p.category_id = ca.category_id
    GROUP BY ca.category_name, c.state
),
y AS (
    SELECT 
        category_name,
        state,
        total_sales
    FROM x
)
SELECT  
    category_name,
    state,
    total_sales
FROM y
order by total_sales desc ;


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Inventory Stock Alerts Query products with stock levels below a certain threshold (e.g., less than 10 units). Challenge: Include last restock date and warehouse information.

select 
          p.product_name,
		  inv.inventory_id,
		  inv.stock,
          inv.warehouse,
          inv.last_date_stock
 from   dim_inventory inv
join dim_product p  on p.product_id = inv.product_id
 where stock < 10;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Shipping Delays Identify orders where the shipping date is later than 3 days after the order date.Challenge: Include customer, order details, and delivery provider.

select 
c.customer_id,
o.order_id,
o.order_date,
o.order_status,
o.seller_id,
s.shipping_id,
s.shipping_date,
concat(c.first_name,  ' ' ,c.last_name) as customer_name,
datediff(s.shipping_date,o.order_date )date_took_to_ship,
s.shipping_providers as delivery_provider,
s.delivery_status,
 case 
 when s.return_date is not null then "Returned"
 else "No return"
 end as return_status,
COALESCE(s.return_date, '  -  ') AS return_date
from orders o
 join shipping s on s.order_id = o.order_id
 join dim_customer c on c.customer_id = o.customer_id
order by customer_id desc;


-------------------------------------------------------------------------------------------------------------------------------------------------------


# Payment Success Rate Calculate the percentage of successful payments across all orders. Challenge: Include breakdowns by payment status (e.g., failed, pending).


select 
payment_status,
count(*) as  total_orders,
round(count(*)*100/sum(count(*)) over() , 2) as percent
from orders o
left join dim_payment pay on  pay.order_id = o.order_id
group by 1;

#    Top Performing Sellers   Find the top 5 sellers based on total sales value. Challenge: Include both successful and failed orders, and display their percentage of successful orders.

with X AS
(
select 
se.seller_id,
se.seller_name,
coalesce(sum(i.quantity*i.price_per_unit),0)as total_sales,
count(o.order_id)as total_orders,
coalesce(sum(case when o.order_status like '%Completed%' then 1 else 0 end),0)  as  Completed,
coalesce(sum(case when o.order_status like '%Cancelled%' then 1 else 0 end ),0) as  Cancelled,
coalesce(sum(case when o.order_status like '%Returned%'  then 1 else 0 end),0)  as  Returned,
coalesce(sum(case when o.order_status like '%Inprogress%' then 1 else 0 end ),0) as Inprogress
from order_item i
join orders o on o.order_id = i.order_id
join seller se on se.seller_id = o.seller_id
group by 1 , 2
),

y as 
(
select 
se.seller_id,
se.seller_name,
coalesce(sum(i.quantity*i.price_per_unit),0)as completed_sales
from order_item i
join orders o on o.order_id = i.order_id
join seller se on se.seller_id = o.seller_id
WHERE o.order_status not LIKE '%Returned%' 
AND o.order_status not LIKE '%Inprogress%'
AND o.order_status not LIKE '%Cancelled%'
group by 1 , 2
)

select 
x.seller_id,
x.seller_name,
x.total_sales,
y.completed_sales,
x.total_orders,
x.Completed,
x.Cancelled,
x.Returned,
x.Inprogress,
round((completed/total_orders)*100,2) as sucessfull_orders,
round(((cancelled + returned) / total_orders)*100,2) as failed_orders
from x
join y on x.seller_id = y.seller_id ;


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Product Profit Margin. Calculate the profit margin for each product (difference between price and cost of goods sold).Challenge: Rank products by their profit margin, showing highest to lowest.


WITH x AS 
(
    SELECT 
        p.product_id,
        p.product_name,
        COALESCE(SUM(i.quantity * i.price_per_unit), 0) AS total_revenue,
        COALESCE(SUM(i.quantity * p.cogs), 0) AS total_cogs
    FROM dim_product p
    LEFT JOIN order_item i ON i.product_id = p.product_id
    GROUP BY p.product_id, p.product_name
)
SELECT 
    x.product_id,
    x.product_name,
    x.total_revenue,
    x.total_cogs,
    (x.total_revenue - x.total_cogs) AS Profit_margin,
    ROUND(( (x.total_revenue - x.total_cogs) / NULLIF(x.total_revenue, 0) ) * 100, 2) AS Profit_margin_percent,
    dense_RANK() OVER 
    ( ORDER BY ROUND(( (x.total_revenue - x.total_cogs) / NULLIF(x.total_revenue, 0)) * 100, 2)desc ) 
    as rank_product
FROM x;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Most Returned Products. Query the top 10 products by the number of returns.Challenge: Display the return rate as a percentage of total units sold for each product.

with x as (
SELECT 
        p.product_id,
        p.product_name,
        COALESCE(COUNT(i.quantity), 0) AS total_orders,
        COALESCE(SUM(CASE WHEN o.order_status LIKE '%Returned%' THEN 1 ELSE 0 END), 0) AS total_returned_orders
    FROM order_item i
    right JOIN dim_product p  ON p.product_id = i.product_id
     right JOIN orders o ON o.order_id = i.order_id
    GROUP BY p.product_id, p.product_name
 )
 SELECT *,
              round((total_returned_orders/nullif(total_orders,0))*100,2) as return_rate
 FROM x
order by return_rate desc;
    
    
    
    
SELECT 
    p.product_id,
    p.product_name,
    COALESCE(SUM(i.quantity), 0) AS total_unit_sold,  
    COALESCE(SUM(CASE WHEN o.order_status LIKE '%Returned%' THEN i.quantity ELSE 0 END), 0) AS total_units_returned
FROM order_item i
 JOIN dim_product p ON p.product_id = i.product_id
 JOIN orders o ON o.order_id = i.order_id
GROUP by p.product_id,
    p.product_name;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Inactive Sellers.Identify sellers who haven’t made any sales in the last 6 months.Challenge: Show the last sale date and total sales from those sellers.

SELECT *  
FROM seller se  
WHERE se.seller_id NOT IN (  
    SELECT DISTINCT o.seller_id  
    FROM orders o  
    WHERE o.order_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) 
    and 
    year(order_date) = "2024"
);


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# IDENTITY customers into returning or new.if the customer has done more than 5 return categorize them as returning otherwise new.Challenge: List customers id, name, total orders, total returns

with x as
(
select 
c.customer_id,
concat((c.first_name), '  ' ,(c.last_name)) as customer_name,
count(*) total_orders,  
COALESCE(SUM(CASE WHEN o.order_status LIKE '%Returned%' THEN i.quantity ELSE 0 END), 0) AS total_return
from dim_customer c
left join orders o on o.customer_id = c.customer_id
left join order_item i on i.order_id = o.order_id
group by 
		  c.customer_id,
		  customer_name,
		  o.order_status
)
 
select 
x.*,
case when total_return > 5 then "Returning Customers" else 'New Customer' end  as category
from x;

select * 
from  y
join x;
-----------------------------------------
WITH x AS (
    SELECT 
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
        COUNT(o.order_id) AS total_orders,  
        COALESCE(SUM(CASE WHEN o.order_status LIKE '%Returned%' THEN i.quantity ELSE 0 END), 0) AS total_return
    FROM dim_customer c
    LEFT JOIN orders o ON o.customer_id = c.customer_id
    LEFT JOIN order_item i ON i.order_id = o.order_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)

SELECT 
    x.*,
    CASE 
        WHEN x.total_return > 5 THEN 'Returning Customer' 
        ELSE 'New Customer' 
    END AS category
FROM x;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#  Top 5 Customers by Orders in Each State.Identify the top 5 customers with the highest number of orders for each state.Challenge: Include the number of orders and total sales for each customer.

select 
concat((c.first_name) , ' ' ,(c.last_name)) as customer_name,
coalesce(c.state),
coalesce((count(o.order_id)),0) as total_orders,
coalesce(sum(i.quantity*i.price_per_unit),0) as total_sales
from order_item i
left join orders  o on o.order_id = i.order_id
left join dim_customer c on c.customer_id = o.customer_id
group by 1,2
order by total_sales desc;

SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    COALESCE(c.state, 'Unknown') AS state,
    COUNT( o.order_id) AS total_orders,  -- Ensure unique order count
    SUM(i.quantity * i.price_per_unit) AS total_sales
FROM order_item i
JOIN orders o ON o.order_id = i.order_id
JOIN dim_customer c ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name, c.state
ORDER BY total_sales DESC, total_orders DESC;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#  Revenue by Shipping Provider.Calculate the total revenue handled by each shipping provider.Challenge: Include the total number of orders handled and the average delivery time for each provider.

select 
s.shipping_providers,
coalesce(round(min(datediff(s.shipping_date,o.order_date )),0),0) AS min_shipping,
coalesce(round(max(datediff(s.shipping_date,o.order_date )),0),0) AS max_shipping,
coalesce(round(avg(datediff(s.shipping_date,o.order_date )),0),0) AS Avg_shipping,
count(o.order_id) as total_orders,
sum(i.quantity * i.price_per_unit) as total_sales
from order_item i
join shipping   s on  i.order_id =s.order_id
join orders  o  on o.order_id = i.order_id
group by 1;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#   Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023) #Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
#Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)

WITH x AS (
    SELECT 
        p.product_name AS product,
        COALESCE(ca.category_name, 'Unknown') AS category_name,
        YEAR(o.order_date) AS order_year,
        SUM(i.quantity * i.price_per_unit) AS total_sales
    FROM dim_product p
    LEFT JOIN order_item i ON p.product_id = i.product_id
    LEFT JOIN orders o ON i.order_id = o.order_id
    LEFT JOIN dim_category ca ON ca.category_id = p.category_id
    GROUP BY p.product_name, category_name, order_year
), 
y AS (
    SELECT 
        product,
        category_name,
        order_year,
        COALESCE(total_sales, 0) AS current_year_sales,
        LAG(total_sales) OVER (PARTITION BY product ORDER BY order_year) AS last_year_sales
    FROM x
),
z as (SELECT 
    product,
    category_name,
    coalesce(SUM(CASE WHEN order_year = 2020 THEN current_year_sales ELSE 0 END),0) AS sales_2020,
    coalesce(SUM(CASE WHEN order_year = 2021 THEN current_year_sales ELSE 0 END),0) AS sales_2021,
    coalesce(SUM(CASE WHEN order_year = 2022 THEN current_year_sales ELSE 0 END),0) AS sales_2022,
    coalesce(SUM(CASE WHEN order_year = 2023 THEN current_year_sales ELSE 0 END),0)AS  sales_2023,
    coalesce(SUM(CASE WHEN order_year = 2024 THEN current_year_sales ELSE 0 END),0) AS sales_2024
FROM y
GROUP BY product, category_name
)

select
product,
category_name,
sales_2023,
sales_2022,
round(( sales_2023 - sales_2022 ) / (sales_2022 ) * 100,2) AS changes
from z ;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------



